<project name="nuxeo-debian-package"
         default="package"
         xmlns:nx="urn:nuxeo-build"
         xmlns:artifact="urn:nuxeo-artifact">
    <taskdef resource="org/nuxeo/build/antlib.xml" uri="urn:nuxeo-build" />
    <taskdef resource="org/nuxeo/build/artifact/antlib.xml"
           uri="urn:nuxeo-artifact" />
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <property name="out.dir" value="${maven.project.build.directory}" />
    <property name="resources.dir" value="${out.dir}/resources" />

    <!-- remote host settings -->
    <property name="apt.host" value="apt.nuxeo.org" />
    <property name="apt.user" value="nuxeo" />
    <property name="apt.pool" value="/var/www/apt.nuxeo.org/pool" />
    <property name="apt.keyfile" value="${user.home}/.ssh/id_rsa" />
    <property name="apt.passphrase" value="" />

    <!-- Get variables from environment if set, use defaults otherwise -->
    <target name="init-from-env">
        <property environment="env" />
        <!-- distribution settings -->
        <condition property="distribution.groupId" value="${env.distribution.groupId}"
                   else="org.nuxeo.ecm.distribution">
            <isset property="env.distribution.groupId" />
        </condition>
        <condition property="distribution.artifactId" value="${env.distribution.artifactId}"
                   else="nuxeo-distribution-tomcat">
            <isset property="env.distribution.artifactId" />
        </condition>
        <condition property="distribution.version" value="${env.distribution.version}"
                   else="8.3-SNAPSHOT">
            <isset property="env.distribution.version" />
        </condition>
        <condition property="distribution.classifier" value="${env.distribution.classifier}"
                   else="nuxeo-cap">
            <isset property="env.distribution.classifier" />
        </condition>
        <condition property="distribution.archive" value="${env.distribution.archive}">
            <isset property="env.distribution.archive" />
        </condition>
        <!-- partial package settings -->
        <condition property="package.name" value="${env.package.name}"
                   else="nuxeo">
            <isset property="env.package.name" />
        </condition>
        <propertyregex property="package.name.clean"
                       input="${package.name}"
                       regexp="[^a-zA-Z0-9]"
                       replace=""
                       global="true"
                       defaultValue="${package.name}" />
        <condition property="package.revision" value="${env.package.revision}"
                   else="01">
            <isset property="env.package.revision" />
        </condition>
    </target>


    <!-- pick deb version and destination pool from distribution version -->
    <target name="init" depends="init-from-env">
        <!-- Build timestamp -->
        <tstamp>
            <format property="build.timestamp" pattern="yyyyMMdd" />
        </tstamp>
        <!-- Check whether we have a snapshot -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.snapshot.version"
                               input="${distribution.version}"
                               regexp="([0-9\.]+)-SNAPSHOT"
                               select="\1-00+${build.timestamp}+${package.revision}" />
                <if>
                    <isset property="package.snapshot.version" />
                    <then>
                        <property name="package.version" value="${package.snapshot.version}" />
                        <property name="package.type" value="snapshots" />
                    </then>
                </if>
            </then>
        </if>
        <!-- Check whether we have a date-based release -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.datebased.version"
                               input="${distribution.version}"
                               regexp="([0-9\.]+)-I([0-9]{8})_(.*)"
                               select="\1-00+\2+\3+${package.revision}" />
                <if>
                    <isset property="package.datebased.version" />
                    <then>
                        <property name="package.version" value="${package.datebased.version}" />
                        <property name="package.type" value="datebased" />
                    </then>
                </if>
            </then>
        </if>
        <!-- Check whether we have a release candidate -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.rc.version"
                               input="${distribution.version}"
                               regexp="([0-9\.]+)-(RC[0-9]+)"
                               select="\1-00+${build.timestamp}+\2+${package.revision}" />
                <if>
                    <isset property="package.rc.version" />
                    <then>
                        <property name="package.version" value="${package.rc.version}" />
                        <property name="package.type" value="datebased" />
                    </then>
                </if>
            </then>
        </if>
        <!-- Check whether we have a fasttrack -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <propertyregex property="package.fasttrack.version"
                               input="${distribution.version}"
                               regexp="([0-9]+\.[1-9]{1})$"
                               select="\1" />
                <if>
                    <isset property="package.fasttrack.version" />
                    <then>
                        <property name="package.version" value="${package.fasttrack.version}" />
                        <property name="package.type" value="fasttracks" />
                    </then>
                </if>
            </then>
        </if>
        <!-- None of the above? We have a release! -->
        <if>
            <not>
                <isset property="package.type" />
            </not>
            <then>
                <property name="package.version" value="${distribution.version}" />
                <property name="package.type" value="releases" />
            </then>
        </if>
        <!-- Versions in debian parlance -->
        <propertyregex property="debian.version"
                       input="${package.version}"
                       regexp="([0-9\.]+)(-.*)?"
                       select="\1" />
        <propertyregex property="debian.revision"
                       input="${package.version}"
                       regexp="([0-9\.]+)-(.*)"
                       select="\2"
                       defaultValue="${package.revision}" />
        <!-- Print results -->
        <echo message="*** Version settings ***" />
        <echo message="Distribution version: ${distribution.version}" />
        <echo message="Package version: ${package.version}" />
        <echo message="Package type: ${package.type}" />
        <echo message="Debian version: ${debian.version}" />
        <echo message="Debian revision: ${debian.revision}" />
    </target>


    <!-- Prepare files for deb packaging -->
    <target name="setup" depends="init">

        <echo message="*** Download and extract distribution ***" />
        <!-- prepare distribution -->
        <if>
            <isset property="distribution.archive" />
            <then>
                <unzip src="${distribution.archive}" dest="${out.dir}/tmpdist" overwrite="true" />
            </then>
            <else>
                <unzip dest="${out.dir}/tmpdist" overwrite="true">
                    <artifact:resolveFile key="${distribution.groupId}:${distribution.artifactId}:${distribution.version}:zip:${distribution.classifier}" />
                </unzip>
            </else>
        </if>
        <!-- "rename" distribution to known name -->
        <path id="unzip-dir">
            <dirset dir="${out.dir}/tmpdist">
                <include name="*" />
            </dirset>
        </path>
        <property name="unzip-name" refid="unzip-dir" />
        <move file="${unzip-name}"
              tofile="${out.dir}/${package.name}-${debian.version}/distribution" />
        <delete includeEmptyDirs="true">
            <fileset dir="${out.dir}/tmpdist" />
        </delete>

        <!-- Repack as .orig.tar.gz for source package
             Given an identical source package, the archive must be identical every time -->
        <echo message="*** Repack as .orig.tar.gz ***" />
        <!-- Set standard file permissions (depends on umask otherwise) -->
        <chmod perm="0644">
            <fileset dir="${out.dir}/${package.name}-${debian.version}">
                <include name="**" />
            </fileset>
        </chmod>
        <chmod perm="0755">
             <dirset dir="${out.dir}/${package.name}-${debian.version}">
                <include name="**" />
            </dirset>
        </chmod>
        <!-- Since preservelastmodified doesn't seem to work correctly, set all files to fixed date -->
        <touch datetime="01/01/2000 1:00 am">
            <fileset dir="${out.dir}/${package.name}-${debian.version}">
                <include name="**" />
            </fileset>
        </touch>
        <!-- Pack and compress -->
        <tar destfile="${out.dir}/${package.name}_${debian.version}.orig.tar.gz" compression="gzip">
            <tarfileset dir="${out.dir}" username="root" group="root">
                <include name="${package.name}-${debian.version}/**" />
            </tarfileset>
        </tar>

        <!-- Prepare structure for dpkg-buildpackage -->
        <echo message="*** Prepare structure for dpkg-buildpackage ***" />
        <filterset id="nxvars">
            <filter token="package.name" value="${package.name}" />
            <filter token="package.name.clean" value="${package.name.clean}" />
            <filter token="package.fullversion" value="${debian.version}-${debian.revision}" />
            <filter token="nuxeo.home.dir" value="/var/lib/${package.name}/server" />
            <filter token="nuxeo.etc.dir" value="/etc/${package.name}" />
            <filter token="nuxeo.data.dir" value="/var/lib/${package.name}/data" />
            <filter token="nuxeo.log.dir" value="/var/log/${package.name}" />
            <filter token="nuxeo.pid.dir" value="/var/run/${package.name}" />
            <!-- specific to the tomcat distributions -->
            <filter token="nxserver.config.dir" value="/var/lib/${package.name}/server/nxserver/config" />
            <filter token="nxserver.bundle.dir" value="/var/lib/${package.name}/server/nxserver/bundles" />
        </filterset>
        <copy todir="${out.dir}/${package.name}-${debian.version}/debian">
            <fileset dir="${maven.basedir}/resources/debian">
                <include name="**" />
            </fileset>
            <filterset refid="nxvars" />
        </copy>
        <copy todir="${out.dir}/${package.name}-${debian.version}/static_lib">
            <fileset dir="${maven.basedir}/resources/static_lib">
                <include name="**" />
            </fileset>
            <filterset refid="nxvars" />
        </copy>
        <chmod perm="0644">
            <fileset dir="${out.dir}/${package.name}-${debian.version}/static_lib">
                <include name="**" />
            </fileset>
        </chmod>
        <chmod perm="0755">
             <dirset dir="${out.dir}/${package.name}-${debian.version}/static_lib">
                <include name="**" />
            </dirset>
        </chmod>
        <copy todir="${out.dir}/${package.name}-${debian.version}/static_bin">
            <fileset dir="${maven.basedir}/resources/static_bin">
                <include name="**" />
            </fileset>
            <filterset refid="nxvars" />
        </copy>
        <chmod perm="0755">
            <fileset dir="${out.dir}/${package.name}-${debian.version}/static_bin">
                <include name="**" />
            </fileset>
        </chmod>
        <chmod perm="0755">
             <dirset dir="${out.dir}/${package.name}-${debian.version}/static_bin">
                <include name="**" />
            </dirset>
        </chmod>
        <if>
            <not>
                <equals arg1="nuxeo" arg2="${package.name}" />
            </not>
            <then>
                <move file="${out.dir}/${package.name}-${debian.version}/debian/nuxeo.init" tofile="${out.dir}/${package.name}-${debian.version}/debian/${package.name}.init" />
                <move file="${out.dir}/${package.name}-${debian.version}/debian/nuxeo.README.Debian" tofile="${out.dir}/${package.name}-${debian.version}/debian/${package.name}.README.Debian" />
                <move file="${out.dir}/${package.name}-${debian.version}/debian/nuxeo.lintian-overrides" tofile="${out.dir}/${package.name}-${debian.version}/debian/${package.name}.lintian-overrides" />
            </then>
        </if>

    </target>


    <!-- Build the source package -->
    <target name="source-package" depends="setup">

        <echo message="*** Build source package ***" />
        <exec dir="${out.dir}/${package.name}-${debian.version}"
              executable="dpkg-buildpackage"
              failonerror="true">
            <arg value="-rfakeroot" />
            <arg value="-us" />
            <arg value="-uc" />
            <arg value="-S" />
            <env key="PATH" path="${maven.basedir}/bin:${env.PATH}" />
        </exec>

    </target>


    <!-- Build the binary package -->
    <target name="binary-package" depends="source-package">

        <echo message="*** Build binary package ***" />
        <exec dir="${out.dir}/${package.name}-${debian.version}"
              executable="dpkg-buildpackage"
              failonerror="true">
            <arg value="-rfakeroot" />
            <arg value="-A" />
            <arg value="-uc" />
            <env key="PATH" path="${maven.basedir}/bin:${env.PATH}" />
        </exec>

    </target>


    <!-- Move resulting packages -->
    <target name="move-packages" depends="binary-package">

        <echo message="*** Move files to packages directory ***" />
        <move file="${out.dir}/${package.name}_${debian.version}-${debian.revision}_all.deb" todir="${out.dir}/packages/${package.type}" />
        <move todir="${out.dir}/packages/src">
            <filelist dir="${out.dir}">
                <file name="${package.name}_${debian.version}.orig.tar.gz" />
                <file name="${package.name}_${debian.version}-${debian.revision}.diff.gz" />
                <file name="${package.name}_${debian.version}-${debian.revision}.dsc" />
                <file name="${package.name}_${debian.version}-${debian.revision}_source.changes" />
            </filelist>
        </move>

    </target>


    <!-- Run lintian on the results -->
    <target name="lintian" depends="move-packages">

        <echo message="*** Running lintian on the source package ***" />
        <exec dir="${out.dir}/packages/src"
              executable="lintian"
              failonerror="true">
            <arg value="-cEI" />
            <arg value="${package.name}_${debian.version}-${debian.revision}.dsc" />
        </exec>

        <echo message="*** Running lintian on the binary package ***" />
        <exec dir="${out.dir}/packages/${package.type}"
              executable="lintian"
              failonerror="true">
            <arg value="-cEI" />
            <arg value="${package.name}_${debian.version}-${debian.revision}_all.deb" />
        </exec>

    </target>

    <!--Packaging target -->
    <target name="package" depends="lintian">
    </target>

    <!-- deployment target -->
    <!-- Note: For snapshots, this will fail if package happens before
               midnight but deploy happens after midnight.
               This is due to the build stamp being recalculated between executions.
    -->
    <target name="deploy" depends="init">

        <!-- use exec tasks for scp/ssh as the ant tasks tends to hang -->

        <echo message="*** Uploading binary package to apt pool ***" />
        <exec dir="${out.dir}/packages/${package.type}"
              executable="scp"
              failonerror="true">
            <arg value="${package.name}_${debian.version}-${debian.revision}_all.deb" />
            <arg value="${apt.user}@${apt.host}:${apt.pool}/${package.type}/" />
        </exec>

        <echo message="*** Uploading repository update script to apt host ***" />
        <exec dir="${maven.basedir}/bin"
              executable="scp"
              failonerror="true">
            <arg value="update_debian_repository" />
            <arg value="${apt.user}@${apt.host}:bin/" />
        </exec>

        <echo message="*** Updating apt repository on apt host ***" />
        <exec executable="ssh"
              failonerror="true">
            <arg value="${apt.user}@${apt.host}" />
            <arg value="bin/update_debian_repository" />
        </exec>

    </target>

</project>
