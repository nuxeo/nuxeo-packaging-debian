#!/bin/bash -e

# ways we can be called
# http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html
#
# postinst configure most-recently-configured-version
# old-postinst abort-upgrade new-version
# conflictor's-postinst abort-remove in-favour package new-version
# postinst abort-remove
# deconfigured's-postinst abort-deconfigure in-favour failed-install-package version [removing conflicting-package version]

. /usr/share/debconf/confmodule
db_version 2.0

.  /usr/lib/@package.name@/internal/pkg-helper-functions


configure_paths() {

    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.home.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.data.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.etc.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.log.dir@
    mkdir -p @nuxeo.pid.dir@
    chown -R @package.name.clean@:@package.name.clean@ @nuxeo.pid.dir@

}


setup_postgresql() {

    # Return if we already autoconfigured PostgreSQL
    get_conf_var nuxeo.installer.installedpg
    if [ "$RET" = "true" ]; then
        return
    fi

    # Make a note that we're autoconfiguring PostgreSQL
    set_conf_var nuxeo.installer.installedpg true
    db_set @package.name@/installedpg true

    echo " * Creating a dedicated database for @package.name@"

    # Change to /tmp to avoid 'could not change directory to "/root"' messages
    pushd /tmp > /dev/null

    # Generate en_US-UTF-8 locale in case it's not in the system yet
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

    # Check whether nuxeo cluster already exists
    nxcluster=$(pg_lsclusters -h | grep $PGCLUSTER) || true
    if [ -z "$nxcluster" ]; then
        # get postgresql version
        pgversion=$(psql --version | sed -n '1p' | awk '{print $3}' | sed -E 's/([0-9]+\.[0-9]+).*/\1/')
        if [ -z "$pgversion" ]; then
            pgversion=$PGDEFAULTVERSION
        fi
        # create cluster
        pg_createcluster --locale=en_US.UTF-8 $pgversion $PGCLUSTER
        # fix postgresql conf
        pgconf="/etc/postgresql/$pgversion/$PGCLUSTER/postgresql.conf"
        perl -p -i -e "s/^#?shared_buffers\s*=.*$/shared_buffers = 100MB/" $pgconf
        perl -p -i -e "s/^#?max_prepared_transactions\s*=.*$/max_prepared_transactions = 32/" $pgconf
        perl -p -i -e "s/^#?effective_cache_size\s*=.*$/effective_cache_size = 1GB/" $pgconf
        perl -p -i -e "s/^#?work_mem\s*=.*$/work_mem = 32MB/" $pgconf
        perl -p -i -e "s/^#?wal_buffers\s*=.*$/wal_buffers = 8MB/" $pgconf
        perl -p -i -e "s/^#?lc_messages\s*=.*$/lc_messages = 'en_US.UTF-8'/" $pgconf
        perl -p -i -e "s/^#?lc_time\s*=.*$/lc_time = 'en_US.UTF-8'/" $pgconf
        perl -p -i -e "s/^#?log_line_prefix\s*=.*$/log_line_prefix = '%t [%p]: [%l-1] '/" $pgconf
        # fix shmmax for postgresql < 9.3
        if dpkg --compare-versions "$pgversion" lt "9.3"; then
            oldshmmod=$(grep 'After nuxeo install' /etc/sysctl.conf) || true
            if [ -z "$oldshmmod" ]; then
                currentmax=$(grep -E "^kernel.shmmax\s*=" /etc/sysctl.conf | tail -n 1 | cut -d= -f2 | tr -d ' ')
                if [ -z "$currentmax" ]; then
                    currentmax=$(sysctl kernel.shmmax | cut -d= -f2 | tr -d ' ')
                fi
                newmax=$(($currentmax+268435456)) # Add 256MB
                perl -n -i -e "print unless /^kernel.shmmax\s*=/" /etc/sysctl.conf
                echo "# Do not remove those lines (needed by Nuxeo removal scripts):" >> /etc/sysctl.conf
                echo "# Before nuxeo install: shmmax = $currentmax" >> /etc/sysctl.conf
                echo "# After nuxeo install: shmmax = $newmax" >> /etc/sysctl.conf
                echo "kernel.shmmax = $newmax" >> /etc/sysctl.conf
                sysctl -w kernel.shmmax=$newmax
            fi
        fi
        # start cluster
        pg_ctlcluster $pgversion $PGCLUSTER start
    else
        # make sure cluster is started
        pgversion=$(echo $nxcluster | awk '{print $1}')
        pgstatus=$(echo $nxcluster | awk '{print $4}')
        if [ "$pgstatus" != "online" ]; then
            pg_ctlcluster $pgversion $PGCLUSTER start
        fi
    fi

    # Get cluster info to connect to the database
    pgport=$(pg_lsclusters -h | grep $PGCLUSTER | awk '{print $3}')
    pgpass=$(pwgen -c1)

    # Create user,language and functions if missing
    su postgres -c "psql -p $pgport template1 --quiet -t -f-" << EOF > /dev/null
CREATE OR REPLACE FUNCTION mknxuser() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE USER @package.name.clean@ WITH PASSWORD '$pgpass';
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_user WHERE usename='@package.name.clean@'
    ) THEN NULL
    ELSE mknxuser()
    END;
DROP FUNCTION mknxuser();

CREATE OR REPLACE FUNCTION mkplpgsql() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE LANGUAGE plpgsql;
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_catalog.pg_language WHERE lanname='plpgsql'
    ) THEN NULL
    ELSE mkplpgsql()
    END;
DROP FUNCTION mkplpgsql();

CREATE OR REPLACE FUNCTION mktxtint() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE FUNCTION pg_catalog.text(integer) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int4out(\$1));';
CREATE CAST (integer AS text) WITH FUNCTION pg_catalog.text(integer) AS IMPLICIT;
COMMENT ON FUNCTION pg_catalog.text(integer) IS 'convert integer to text';
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int4out(\$1));'
    ) THEN NULL
    ELSE mktxtint()
    END;
DROP FUNCTION mktxtint();

CREATE OR REPLACE FUNCTION mktxtbigint() RETURNS VOID LANGUAGE SQL AS \$\$
CREATE FUNCTION pg_catalog.text(bigint) RETURNS text STRICT IMMUTABLE LANGUAGE SQL AS 'SELECT textin(int8out(\$1));';
CREATE CAST (bigint AS text) WITH FUNCTION pg_catalog.text(bigint) AS IMPLICIT;
COMMENT ON FUNCTION pg_catalog.text(bigint) IS 'convert bigint to text';
\$\$;
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM pg_catalog.pg_proc WHERE proname='text' AND prosrc='SELECT textin(int8out(\$1));'
    ) THEN NULL
    ELSE mktxtbigint()
    END;
DROP FUNCTION mktxtbigint();

EOF

    # Create database if missing
    hasnxdb=$(echo "\\l" | su postgres -c "psql -p $pgport template1 --quiet -t -f-" | awk '{print $1}' | grep "^@package.name.clean@$") || true
    if [ "$hasnxdb" != "@package.name.clean@" ]; then
        su postgres -c "createdb -p $pgport -O @package.name.clean@ -E UTF-8 @package.name.clean@"
    fi

    # Save values in nuxeo.conf
    set_conf_var nuxeo.db.host localhost
    set_conf_var nuxeo.db.port $pgport
    set_conf_var nuxeo.db.name @package.name.clean@
    set_conf_var nuxeo.db.user @package.name.clean@
    set_conf_var nuxeo.db.password $pgpass

    # Switch back to normal directory
    popd > /dev/null

}


configure_nuxeo() {

    # Do the modifications according to choices made in the config script

    db_get @package.name@/bind-address
    set_conf_var nuxeo.bind.address $RET
    db_get @package.name@/http-port
    set_conf_var nuxeo.server.http.port $RET
    db_get @package.name@/ajp-port
    set_conf_var nuxeo.server.ajp.port $RET
    # randomize nuxeo.server.tomcat_admin.port if not set
    get_conf_var nuxeo.server.tomcat_admin.port
    adminport=$RET
    if [ -z "$adminport" ]; then
        # check old key
        get_conf_var nuxeo.server.tomcat-admin.port
        adminport=$RET
    fi
    if [ -z "$adminport" ]; then
        validated=false
        while [ $validated = false ]; do
            adminport=$(($(($RANDOM%9999))+50000))
            check_ip_port_free 127.0.0.1 $adminport
            validated=$RET
        done
    fi
    set_conf_var nuxeo.server.tomcat_admin.port $adminport

    db_get @package.name@/database
    dbchoice=$RET
    if [ "$dbchoice" = "$DBEMBEDDED" ]; then
        set_db_template default
        set_conf_var nuxeo.wizard.skippedpages General
    elif [ "$dbchoice" = "$DBAUTOPGSQL" ]; then
        set_db_template postgresql
        set_conf_var nuxeo.installer.useautopg true
        setup_postgresql
        set_conf_var nuxeo.wizard.skippedpages General,DB
    else
        get_conf_var nuxeo.installer.useautopg
        previouschoice=$RET
        set_conf_var nuxeo.installer.useautopg false
        if [ "$previouschoice" != "false" ]; then
            set_conf_var nuxeo.wizard.skippedpages General
            activate_wizard
        fi
    fi

}

configure_office() {

    # Office suite path
    get_conf_var jod.office.home
    if [ -z "$RET" ]; then
        if [ -d /usr/lib/libreoffice ]; then
            set_conf_var jod.office.home /usr/lib/libreoffice
        elif [ -d /usr/lib/openoffice ]; then
            set_conf_var jod.office.home /usr/lib/openoffice
        elif [ -d /opt/openoffice.org3 ]; then
            set_conf_var jod.office.home /opt/openoffice.org3
        fi
    fi

}

activate_wizard() {

    set_conf_var nuxeo.wizard.done false

}

nuxeoctl() {

    NXCTLPARAMS=$@
    export NUXEO_CONF
    su @package.name.clean@ -m -c "@nuxeo.home.dir@/bin/nuxeoctl $NXCTLPARAMS"
    export -n NUXEO_CONF

}

upgrade_marketplace_packages() {

    OLD_DEB_VERSION=$1
    NEW_DEB_VERSION=@package.fullversion@
    if [ "$NEW_DEB_VERSION" = "" ]; then
        NEW_DEB_VERSION="0"
    fi
    NEW_NX_VERSION=$(echo $NEW_DEB_VERSION | sed -E 's/^(.*)-.*/\1/')
    OLD_NX_VERSION=$(echo $OLD_DEB_VERSION | sed -E 's/^(.*)-.*/\1/')

    # Package directory move with 5.9.4
    if dpkg --compare-versions "$OLD_NX_VERSION" lt "5.9.4"; then
        if dpkg --compare-versions "$NEW_NX_VERSION" ge "5.9.4"; then
            if [ -d @nuxeo.data.dir@/packages ]; then
                mv @nuxeo.data.dir@/packages @nuxeo.home.dir@/packages
            fi
        fi
    fi

    if dpkg --compare-versions "$OLD_NX_VERSION" lt "5.6"; then
        echo "Upgrade from pre-5.6 version."
        # Update deprecated parameters
        perl -p -i -e "s/nuxeo.db.user.separator.key/nuxeo.db.user_separator_key/g" $NUXEO_CONF
        perl -p -i -e "s/nuxeo.server.tomcat-admin.port/nuxeo.server.tomcat_admin.port/g" $NUXEO_CONF
        perl -p -i -e "s/mail.pop3.host/mail.store.host/g" $NUXEO_CONF
        perl -p -i -e "s/mail.pop3.port/mail.store.port/g" $NUXEO_CONF
        perl -p -i -e "s/mail.smtp.host/mail.transport.host/g" $NUXEO_CONF
        perl -p -i -e "s/mail.smtp.port/mail.transport.port/g" $NUXEO_CONF
        perl -p -i -e "s/mail.smtp.username/mail.transport.username/g" $NUXEO_CONF
        perl -p -i -e "s/mail.smtp.password/mail.transport.password/g" $NUXEO_CONF
        perl -p -i -e "s/mail.smtp.usetls/mail.transport.usetls/g" $NUXEO_CONF
        perl -p -i -e "s/mail.smtp.auth/mail.transport.auth/g" $NUXEO_CONF
        # The old prerm script wasn't working correctly
        # Stop the server and do a mp-list again
        echo "Ensuring server is stopped..."
        nuxeoctl --quiet stop || true
        nuxeoctl mp-list | grep -i -E "(started|starting|installing|downloaded)" > @nuxeo.etc.dir@/pkglist.cache || true
    fi

    # Reset package states in case something went wrong with the former package's prerm
    nuxeoctl --quiet --accept=true mp-reset || true


    if dpkg --compare-versions "$NEW_NX_VERSION" gt "5.9.5"; then

        nuxeoctl --quiet mp-init
        if [ -f "@nuxeo.etc.dir@/pkglist.cache" ]; then
            oldpkglist=$(cat @nuxeo.etc.dir@/pkglist.cache | grep -v -- '-HF' | grep -i -E "(started|starting|installing)" | awk '{print $3}' | tr '\n' ' ')
            if [ -n "$oldpkglist" ]; then
                echo " * Trying to reinstall previously installed packages"
                nuxeoctl mp-set --relax=false --accept=true --ignore-missing $oldpkglist
            fi
        fi

    else # old method

        # Lookup saved package states
        declare -A MPSTATES
        declare -A MPIDS
        if [ -f "@nuxeo.etc.dir@/pkglist.cache" ]; then
            mpregex='.*(started|starting|installing|downloaded)[[:space:]](.*)[[:space:]]\(id: (.*)\)'
            while read -r line; do
                if [[ $line =~ cmf ]]; then
                    if [ "${BASH_REMATCH[1]}" = "started" ] || [ "${BASH_REMATCH[1]}" = "starting" ]; then
                        echo "##########################################"
                        echo "# The upgrade script doesn't handle CMF  #"
                        echo "# You will need to reinstall it manually #"
                        echo "##########################################"
                    fi
                else
                    if [[ $line =~ $mpregex ]]; then
                        MPSTATES[${BASH_REMATCH[2]}]=${BASH_REMATCH[1]}
                        MPIDS[${BASH_REMATCH[2]}]=${BASH_REMATCH[3]}
                    fi
                fi
            done < @nuxeo.etc.dir@/pkglist.cache
        fi

        # Remove base packages
        MPDISTLIST="nuxeo-content-browser nuxeo-dm nuxeo-dam nuxeo-cmf nuxeo-social-collaboration nuxeo-rest-api"
        for distPkg in $MPDISTLIST; do
            MPREVLIST="$distPkg $MPREVLIST"
        done
        echo " * Removing old base packages"
        nuxeoctl mp-remove --accept=true --relax=true $MPDISTLIST | grep -i -E "^Removing" || true

        # Install new versions of the base packages in the same state as the old one
        echo " * Updating base packages"
        MPSELECTION=""
        PKGTOINSTALL=""
        nuxeoctl mp-init | grep -i -E "^Adding" || true
        for distPkg in $MPDISTLIST; do
            # Ignore nuxeo-content-browser
            if [ "$distPkg" = "nuxeo-content-browser" ]; then
                continue
            fi
            # Don't try to install CMF on 5.6: not compatible
            if [ "$distPkg" = "nuxeo-cmf" ]; then
                if dpkg --compare-versions "$NEW_NX_VERSION" ge "5.6"; then
                    if dpkg --compare-versions "$NEW_NX_VERSION" lt "5.7"; then
                        echo "Ignoring nuxeo-cmf: not compatible with 5.6"
                        continue
                    fi
                fi
            fi
            # Don't try to install REST API on 5.9.3+: included in CAP
            if [ "$distPkg" = "nuxeo-rest-api" ]; then
                if dpkg --compare-versions "$NEW_NX_VERSION" ge "5.9.3"; then
                    continue
                fi
            fi
            if [ "${MPSTATES[$distPkg]}" = "started" ]; then
                PKGTOINSTALL="$PKGTOINSTALL $distPkg"
                if [ -n "$MPSELECTION" ]; then
                    MPSELECTION="$MPSELECTION,$distPkg"
                else
                    MPSELECTION="packages=$distPkg"
                fi
            fi
        done
        if [ -n "$PKGTOINSTALL" ]; then
            nuxeoctl mp-install $PKGTOINSTALL | grep -i -E "^Installing" || true
        fi

        # If we're still on the same nuxeo version, reactivate other connect packages
        if dpkg --compare-versions "$OLD_NX_VERSION" eq "$NEW_NX_VERSION"; then
            echo " * Reactivating connect packages (same Nuxeo version)"
            PKGTOINSTALL=""
            NAMESTOINSTALL=""
            for pkg in ${!MPIDS[@]}; do
                if [ "${MPSTATES[$pkg]}" != "started" ]; then
                    continue
                fi
                IS_DIST_PACKAGE=false
                for distPkg in $MPDISTLIST; do
                    if [ "$pkg" = "$distPkg" ]; then
                        # Base packages are already handled
                        IS_DIST_PACKAGE=true
                    fi
                done
                if [ "$IS_DIST_PACKAGE" = "false" ]; then
                    PKGTOINSTALL="$PKGTOINSTALL ${MPIDS[$pkg]}"
                    NAMESTOINSTALL="$NAMESTOINSTALL $pkg"
                fi
            done
            if [ -n "$PKGTOINSTALL" ]; then
                echo "Trying to reactivate: $NAMESTOINSTALL"
                nuxeoctl mp-install --accept=true --relax=true $PKGTOINSTALL | grep -i -E "^Installing" || true
            else
                echo "Nothing to do."
            fi
        fi

        # Check for upgrades
        echo " * Checking for package upgrades"
        nuxeoctl mp-upgrade | grep -i -E "^(Uninstalling|Installing)" || true

    fi

}

set_last_installed_version() {

    set_conf_var nuxeo.installer.lastinstalledversion @package.fullversion@

}

migrate_from_pre55() {

    # Read user choice
    db_get @package.name@/migrate || true
    if [ "$RET" = "false" ]; then
        return
    fi
    db_get @package.name@/migratepkg || true
    migratepkg=$RET
    # Execute script
    if [ "$migratepkg" = "nuxeo-dm" ]; then
        /usr/lib/@package.name@/internal/migrate-from-pre55 -p dm
    elif [ "$migratepkg" = "nuxeo-dam" ]; then
        /usr/lib/@package.name@/internal/migrate-from-pre55 -p dam
    elif [ "$migratepkg" = "nuxeo-cmf" ]; then
        /usr/lib/@package.name@/internal/migrate-from-pre55 -p cmf
    else
        echo "Something went wrong - can't get name of package to migrate"
        exit 1
    fi
    # Reread config
    get_existing_conf

}

# dpkg-reconfigure
if [ "$1" = "reconfigure" ] || [ "$DEBCONF_RECONFIGURE" ]; then
    configure_paths
    configure_nuxeo
    db_stop
# new install (old version not set)
elif [ "$1" = "configure" ] && [ -z "$2" ]; then
    create_user
    configure_paths
    db_get @package.name@/migrate || true
    migrate=$RET
    if [ "$migrate" = "true" ]; then
        migrate_from_pre55
    else
        configure_nuxeo
        activate_wizard
    fi
    configure_office
    set_last_installed_version
    db_stop
# upgrade (old version set)
elif [ "$1" = "configure" ]; then
    create_user
    configure_paths
    get_existing_conf
    configure_nuxeo
    upgrade_marketplace_packages $2
    set_last_installed_version
    db_stop
# other
elif [ "$1" = "abort-upgrade" ] || [ "$1" = "abort-remove" ] || [ "$1" = "abort-deconfigure" ]; then
    echo "Not doing anything"
else
    echo "postinst called with unknown argument"
    exit 1
fi

#DEBHELPER#
